name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  pre-release-tests:
    name: Pre-Release Tests
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y bats
          else
            brew install bash bats-core
          fi
      
      - name: Run full test suite
        run: |
          chmod +x tests/run_tests.sh
          bash tests/run_tests.sh -v
      
      - name: Verify script version matches tag
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          SCRIPT_VERSION=$(grep '^VERSION=' shell-bun.sh | head -n1 | cut -d'"' -f2)
          
          if [ "$TAG_VERSION" != "$SCRIPT_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) does not match script version ($SCRIPT_VERSION)"
            exit 1
          fi
          echo "✓ Version check passed: $SCRIPT_VERSION"
  
  create-release:
    name: Create Release
    needs: pre-release-tests
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Extract and increment version for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        id: version_bump
        run: |
          CURRENT_VERSION=$(grep '^VERSION=' shell-bun.sh | head -n1 | cut -d'"' -f2)
          BUMP_TYPE="${{ github.event.inputs.bump_type }}"
          
          # Parse version components (handle both "1.2" and "1.2.3" formats)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Default PATCH to 0 if not present
          PATCH=${PATCH:-0}
          
          # Increment based on bump type
          case "$BUMP_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch|*)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version from $CURRENT_VERSION to $NEW_VERSION ($BUMP_TYPE)"
      
      - name: Update version in script
        if: github.event_name == 'workflow_dispatch'
        run: |
          NEW_VERSION="${{ steps.version_bump.outputs.version }}"
          
          # Update VERSION variable
          sed -i 's/^VERSION=".*"/VERSION="'"$NEW_VERSION"'"/' shell-bun.sh
          
          # Update comment version
          sed -i 's/^# Version: .*/# Version: '"$NEW_VERSION"'/' shell-bun.sh
          
          echo "✓ Updated version to $NEW_VERSION in shell-bun.sh"
      
      - name: Commit version update
        if: github.event_name == 'workflow_dispatch'
        run: |
          git add shell-bun.sh
          git commit -m "Bump version to ${{ steps.version_bump.outputs.version }}"
          git push origin HEAD:$(git rev-parse --abbrev-ref HEAD)
      
      - name: Extract version from script or tag
        id: version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            # For tag pushes, extract from tag ref
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            # For workflow_dispatch, use the newly bumped version
            VERSION="${{ steps.version_bump.outputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
      
      - name: Create tag for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          TAG="v${{ steps.version.outputs.version }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "✓ Created and pushed tag: $TAG"
      
      - name: Fetch tags
        run: |
          git fetch --tags
      
      - name: Create changelog
        id: changelog
        run: |
          # Extract changelog for this version from git commits
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s" --no-merges | grep -v "Bump version to")
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges | grep -v "Bump version to" | head -20)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Shell-Bun v${{ steps.version.outputs.version }}
          body: |
            ## Shell-Bun v${{ steps.version.outputs.version }}
            
            Interactive build environment script with fuzzy pattern matching and parallel execution.
            
            ### Changes
            ${{ steps.changelog.outputs.changelog }}
            
            See [README.md](https://github.com/Chetic/shell-bun/blob/v${{ steps.version.outputs.version }}/README.md) for full documentation.
          files: |
            shell-bun.sh
            shell-bun.cfg
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify success
        run: |
          echo "✓ Release v${{ steps.version.outputs.version }} created successfully"
